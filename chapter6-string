text = "X-DSPAM-Confidence:    0.8475";
pos = text.find('0') # beginning with "0" position # return only the first finding, then stop
str_output = text[pos:] # []beginning with "0" position; len() starts with "1" 
# last=fruit[len(fruit)-1] is the same as last = fruit[-1]
flo_output = float (str_output)
print flo_output

# traversal through a string
i = 0
fruit = 'banana'
while i < len(fruit):
    print fruit[i]
    i = i + 1
;
i = 0
fruit = 'banana'
for i in fruit:
    print i

# string slice, The operator [n:m] including the ﬁrst but excluding the last.
>>> fruit[:3] 'ban' # starting from the first letter of string 
>>> fruit[3:] 'ana' # starting from the 3rd position of the string
>>> fruit[3:3] '' # this is an empty string
>>> fruit[:] 'banana'

# strings are immutable
>>> greeting = 'Hello, world!' 
>>> new_greeting = 'J' + greeting[1:] 
>>> print new_greeting 

# frequency??
word = 'banana'
count = 0
for i in word:
    if i == 'a':
        count = count +1
print count # When the loop exits, count contains the result
# Encapsulate this code in a function named count, and generalize it so that it accepts the string and the letter as arguments
def count(word,letter):
    freq = 0
    for i in word:# the i'th position
        if len(letter) == 1:
            if i == letter:
                freq = freq + 1
        else: # if the enter is a string
            while letter in word:
                freq = freq + 1
                pos = word.find(letter)
                word = word[pos+len(letter):]
    return freq
enter_word = raw_input("Enter words:") #'banana'
enter_letter = raw_input("Enter words:") #'a'as letteror "an" as string
print count(enter_word,enter_letter)

# str.count()
print word.count('a') # 3
print word.count('a',2,5) # 1
# excluding the 5th position

# words in alphabetical order;uppercase letters come BEFORE all the lowercase letters(means SMALL);
# convert to all lowercase before performing the comparison
word = 'Pinapple'
if word < 'banana':
    print 'Your word,' + word + ', comes before banana.' #'P'
elif word > 'banana':
    print 'Your word', word, 'comes after banana.' #'p'
else:
    print 'All right, bananas.'

# dir(object)lists the methods available for an object, the object can be string, float, etc.eg.capitalize() is a method of string
# help(str.capitalize) # method description
# https://docs.python.org/2/library/stdtypes.html# string-methods
# Instead of the function syntax upper(word), it uses the method syntax word.upper();invoking upper on the word
# strip(), remove white space (spaces, tabs, or newlines) at the beginning and at the end of a string, (keep the middle space)
# make multiple method calls in a single expression; print line.lower().startswith('p') # True 

word = 'banana'
index = word.find('na', 3) # search 'na' starting from the 3rd position
print index # 4

https://docs.python.org/2/library/stdtypes.html
# parsing string
data = 'From stephen.marquard@uct.ac.za Sat Jan 5 09:14:16 2008'
pos1 = data.find("@")
pos2 = data.find(" ",pos1)
subdata = data[pos1+1:pos2] # excluding pos2
print subdata # can't print subdata = ... directly

# format operator
# uses '%d' to format an integer, '%g' to format a ﬂoatingpoint number, and '%s' to format a string
print 'In %d years I have spotted %g %s.' % (3, 0.1, 'camels')
# convert 42 from integer to string
camels = 42
print '%d' % camels # 42 but now it's string

# debugging
while True: ## ALWAYS true even if you don't enter anthing, must with a break clause;
    line = raw_input ('> ')
    if len(line) != 0 and line[0] == '#': # len() is always >=0  # debugging: adding guardian if len(line)>0 and.. :
    # if line.startswith('#'): , if nothing entered, return is False, not errror message
    # if enter nothing, no 0th position, so line[0] will cause error message
        continue # ignore all below, loop another round
    if line == 'done':
        break
    print line # if enter nothing, print nothing
print "Done!"

# True ??
The rule for strings is that an empty string is considered False, a non-empty string is considered True; 
A numerical value of 0 is considered false;
All other expressions are considered True 

# index() is similar to find(), but str.find returns -1 when it does not find the substring.While str.index raises ValueError:
# join()
s = "-";
seq = ("a", "b", "c"); # This is sequence of strings.
print s.join( seq ) # a-b-c

