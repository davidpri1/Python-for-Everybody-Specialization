# tuples are immutable, list is mutable; 
# t1 = ('a',) # single element typle must include the final comma
  t = tuple() # built-in function 
  print tuple('lupins')  -> ('l','u','p','i','n','s'); print t[0] -> 'l'; print t[1:3] -> ('u','p')
  t = ('A',) + t[1:] -> ('A','u','p','i','n','s')  # can't modify the elements of a tuple, but can replace on tuple with another
# comparing: (0,1,2)<(0,3,4), (0,1,20000) < (0,3,4)
  dev sort_by_length(words):
      lst = list()
      for word in words:
          lst.append(len(word),word) # len() goes before word, so when comparing, it's compairing the len() first, then word
      lst.sort()(reverse = True)  # sort by first element - length - descending
      lst2 = list()
      for length, word in lst:
          lst2.append(word)
      return lst2
# assigning: m = [ 'have', 'fun' ], x,y = m; a,b = b, a
  addr = 'monty@python.org', uname, domin = addr.split('@')
  d = {'a':10,'b':1,'c':22} # {} dictonary 
  t = d.items() # items() is a method of dictionary that returns a list [] of tuples ()-> [('a',10),('c',22),('b',1)] # this is a list[]
  t.sort() # ascending by key
  l = lst() # hand-constructing the list
  for key, value in t:
      l.append((value, key))
  l.sort()
  print l -> [(1,'b'),(10,'a'),(22,'c')] 
# the ten most common words 
 import string
 handle = open ('romeo-full.txt')
 counts = dict()
 for line in handle:
     line = line.translate(None, string.punctuation)
     line = line.lower()
     words = line.split()
     for word in words:
         if word not in counts:
             count[word] = 1
         else:
             count[word] = count[word] + 1
 # sort the dictionary by value
 lst = list()
 for key, val in counts.items():
    lst.append( (val,key) )
 lst.sort(Reverse = True)
 for a, b in lst[:10]:
    print a, b
# using tuples as keys in dictionary
 directory[last, first] = number
 for last, first in directory:
     print last, first, directory[last,first]
# sequences: string, lists, and tuples -> lists are more common than tuples because it's mutable, has methods like sort, reverse
  If you are passing a sequence as an argument to a function, using tuples reduces the potential for unexpected behavior due to aliasing.         
  However Python provides the built-in functions sorted and reversed, 
  which take any sequence as a parameter and return a new list with the same elements in a different order
# reading, running, ruminating, retreating
  Immutable types like integers, floats and strings are hashable; mutable types like lists and dictionaries are not
   
