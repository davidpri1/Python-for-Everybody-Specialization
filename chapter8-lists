# If an index has a negative value, it counts backward from the end of the list
# If you try to read or write an element that does not exist, you get an IndexError.
numbers = [1,2,3,4]
for i in range(len(numbers)): # range returns a list of index of list from 0 to n-1
    numbers[i] = numbers[i] * 2
numbers2 = numbers # [2,4,6,8]
numbers2[1:3] = [0,0] # [2,0,0,8]
numbers3 = ['a','b','c','d']
numbers3 = [5,6,7,8]
numbers2.extend(numbers3) # extend()
print numbers2 # [2,0,0,8,5,6,7,8]
numbers2.sort() # sort() arranges the elements of the list from low to high
# sort means sorting yourself
# print numbers2.sort() THIS IS WRONG
print numbers2

# build a list from scratch
numlist = list() # make an empty list before the loop starts
while True:
    inp = raw_input('Enter a number:')
    if inp == 'done':
        break
    val = float(inp)
    numlist.append(val) # append to itself
print sum(numlist)/len(numlist)

# deleting elements
t = ['a','b','c','d','e','f']
x = t.pop(1) #pop() modifies the list and returns the element that was removed
print t #['a','c','d','e','f']
x = t.pop() #id don't provide index, removing x= last element
print t #['a','c','d','e']
del t[1:2]#if don't need removed value, use del operator
#the slice doesn't include the 2nd index
print t #['a','d','e']
t.remove('d') #
print t #['a','e']

# Lists and strings
s='spam'
print list(s)
s='pining for the fjords'
print s.split()
s='spam-spam-spam'
delimiter='-'
print s.split(delimiter)
t=['pining', 'for', 'the', 'fjords']
delimiter=' '
print delimiter.join(t)

# Parsing lines
handle = open('C:\Users\Sharon\Desktop\Python\code\mbox.txt')
for line in handle:
    line = line.rstrip()
    if not line.startswith("From "): continue
    mylist = line.split()
    print mylist[2]

# Objects and values
# def delete_head(t):
    del t[0]
  letters = ['a','b','c'] #The parameter t and the variable letters are aliases for the same object
  delete_head(letters)
  print letters
# the append method modiﬁes a list, but the + operator creates a new list:
  t1.append(3), print t1; t1+[3], print t2

# Exercise 1
def chop(t):
    del t[0]
    del t[len(t)-1]
    print t
def middle(t):
    endpos = len(t)-1
    x = t[1:endpos]
    print x
word = ['a','b','c','d']
chop(word) # b,c
print word # b,c
word = ['a','b','c','d']
middle(word) # b,c
print word #a, b, c,d

# Debugging:
# 1. Don’t forget that most list methods modify the argument and return None. 
# 2. Pick an idiom and stick with it. t.append(x) or t = t + [x]  # t means a list
# 3. Make copies to avoid aliasing, orig = t[:], t.sort()
# 4. Lists, split, and ﬁles; pieces = emails.split('@'); thing = line.split(";"), split() default to be space
fhand = open('mbox-short.txt')  # catch (try/except) if file doesn't exit, open() caused error
count = 0 
for line in fhand: 
    words = line.split() 
    # print 'Debug:', words 
    if len(words) == 0 or words[0] != "From " : continue  #guardian statement, so words[0] will not fail
    print words[2]


# Exercise 2: For each word on each line check to see if the word is already in the list and if not append it to the list. 
fname = raw_input("Enter file name: ")
fh = open(fname)
lst = list()
for line in fh:
    line = line.rstrip()
    mylist = line.split()
    for word in mylist:
        if word not in lst:
            lst.append(word)
        continue
lst.sort()
print lst

# Exercise 3
fname = raw_input("Enter file name: ")
try:
    if len(fname) > 0:
        fh = open(fname)
except:
    pass
count = 0
for line in fh:
    if line.startswith('From '): # Hint: make sure not to include the lines that start with 'From:'.
        line = line.rstrip()
        lst = line.split()
        email = lst[1]
        print email
        count = count +1
print "There were", count, "lines in the file with From as the first word"
