# eng2sp = dict() # {} means empty; 
  eng2sp['one'] = 'uno' # {'one':'uno','three':'tres','two':'dos'}
  print eng2sp['two'] # 'dos'. the elements of a dictionary are never indexed with integer indices buy by keys
  len(eng2sp) #3 key-value pairs
  'tres' in eng2sp # False, only can check "Key"; 'three' in eng2sp -> True
  vals = eng2sp.values()
  'tres' in vals -> True
dev histogram(s):
    d = dict()   # empty dict      
    for i in s:           
        if i not in d:                        
            d[i] = 1
        else:
            d[i] = d[i] + 1    # revised. no need to use if anymore: for i in s: d[i]=d.get(i,0) + 1
   return d  
dev print_sorted_hist(d):
    lst = d.keys()
    lst.sort()
    for i in lst:
        print i, d[i]
h = histogram('brontosaurus')
print_sorted_hist(h)
;
counts = { 'chuck' : 1 , 'annie' : 42, 'jan': 100}
vals = counts['jan']
print vals
for key in counts:
    if counts[key] > 10 : 
        print key, counts[key]
;
import string  # string.punctuation  - '!"#$%&\'()*+,-./:;<=>?@[\\]ˆ_`{|}˜'
file = raw_input('Enter file name:')
try:
    handle = open(file)
except:
    print 'File cannot be opened:', file
    exit() # exit this program
counts = dict()
for line in handle:
    line = line.translate(None, string.punctuation) # New Code string.translate(s, table[, deletechars])
    line = line.lower() # New Code python 2.5 or earlier print a.translate(string.maketrans('',''),string.punctuation)
    words = line. split()
    for word in words:
        counts[word] = counts.get(word,0) + 1 # if not find anything value for this key, return default value is 0
print counts # or print counts.items() -> the output is a list of tuples[(),()]
;
counts = { 'chuck' : 1 , 'annie' : 42, 'jan': 100} 
print list(counts) # list(key)
lst = counts.keys()  # d.keys(), lst = list(counts); d.values(), vals = counts.values(); d.items()
lst.sort() 
for key in lst: # you can use any word instead of key, for example, d=dict(), for i in d -> i must mean "keys"
    print key, counts[key]
for a, b in counts.items(): # bigcount = None, bigword = None, 
                            # for word,count in counts.items(): 
                            #     if bigcount is None or count > bigcount:
                            #         bigcount = count, bigword = word
    print a, b

# Debugging: 
(1) scale down the input - it reads only the first n lines. If there's an error, reduce n to the smallest value to manifest the error
(2) check summaries and type - A common cause of runtime errors is a value that is not the right type
(3) sanity check, consistency check

Exercises:
